pipeline {
    agent {
        docker {
            image 'sandy199/maven-docker-openjdk17:latest' // docker CLI + maven installed
            args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
        }
    }

    environment {
        DOCKER_IMAGE = "sandy199/ultimate-cicd:${BUILD_NUMBER}"
        SONAR_URL = "http://3.94.253.200:9000"
    }

    stages {
        stage('Checkout') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/main']],
                    userRemoteConfigs: [[
                        url: 'https://github.com/myspacesandy/Ultimate-jenkins-java-app-cicd.git',
                        credentialsId: 'github'
                    ]],
                    extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: '.']]
                ])
            }
        }
        stage('Clean Workspace') {
            steps {
                dir('Jenkins-Zero-To-Hero/java-maven-sonar-argocd-helm-k8s/spring-boot-app') {
                    echo 'Cleaning target folder before starting build...'
                    sh 'rm -rf target || true'
                }
            }
        }

        stage('Build and Test') {
            steps {
                dir('Jenkins-Zero-To-Hero/java-maven-sonar-argocd-helm-k8s/spring-boot-app') {
                    echo 'Running Maven clean package...'
                    sh 'mvn clean package'
                }
            }
        }

        stage('Static Code Analysis') {
            steps {
                withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
                    dir('Jenkins-Zero-To-Hero/java-maven-sonar-argocd-helm-k8s/spring-boot-app') {
                        echo 'Running SonarQube analysis...'
                        sh 'mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
                    }
                }
            }
        }

        stage('Build and Push Docker Image') {
            steps {
                script {
                    dir('Jenkins-Zero-To-Hero/java-maven-sonar-argocd-helm-k8s/spring-boot-app') {
                        echo 'Building Docker image from host Docker...'
                        sh 'docker build -t ${DOCKER_IMAGE} .'
                    }

                    def dockerImage = docker.image("${DOCKER_IMAGE}")
                    docker.withRegistry('https://index.docker.io/v1/', 'docker-cred') {
                        dockerImage.push()
                    }
                }
            }
        }

        stage('Update Deployment File') {
            environment {
                GIT_REPO_NAME = "Ultimate-jenkins-java-app-cicd"
                GIT_USER_NAME = "myspacesandy"
            }
            steps {
                withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                    dir('Jenkins-Zero-To-Hero') {
                        sh '''
                            git config user.email "sandeepchauhan4681@gmail.com"
                            git config user.name "Sandeep Chauhan"
                            BUILD_NUMBER=${BUILD_NUMBER}
                            sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                            git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                            git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                            git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                        '''
                    }
                }
            }
        }
    }
}
