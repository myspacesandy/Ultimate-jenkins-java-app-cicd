pipeline {
  agent {
    docker {
      image 'abhishekf5/maven-abhishek-docker-agent:v1' // docker CLI + maven installed
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
    }
  }

  environment {
    DOCKER_IMAGE = "abhishekf5/ultimate-cicd:${BUILD_NUMBER}"
    SONAR_URL = "http://3.94.253.200:9000"
  }

  stages {
    stage('Checkout') {
      steps {
        sh 'echo "Skipping checkout stage..."'
      }
    }

    stage('Clean Workspace') {
      steps {
        dir('Jenkins-Zero-To-Hero/java-maven-sonar-argocd-helm-k8s/spring-boot-app') {
          echo 'Cleaning target folder before starting build...'
          sh 'rm -rf target || true'
        }
      }
    }

    stage('Build and Test') {
      steps {
        dir('Jenkins-Zero-To-Hero/java-maven-sonar-argocd-helm-k8s/spring-boot-app') {
          echo 'Running Maven clean package...'
          sh 'mvn clean package'
        }
      }
    }

    stage('Static Code Analysis') {
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          dir('Jenkins-Zero-To-Hero/java-maven-sonar-argocd-helm-k8s/spring-boot-app') {
            echo 'Running SonarQube analysis...'
            sh 'mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
          }
        }
      }
    }

    stage('Build and Push Docker Image') {
      steps {
        script {
          dir('Jenkins-Zero-To-Hero/java-maven-sonar-argocd-helm-k8s/spring-boot-app') {
            echo 'Building Docker image from host Docker...'
            sh 'docker build -t ${DOCKER_IMAGE} .'
          }

          def dockerImage = docker.image("${DOCKER_IMAGE}")
          docker.withRegistry('https://index.docker.io/v1/', 'docker-cred') {
            dockerImage.push()
          }
        }
      }
    }
  }
}
